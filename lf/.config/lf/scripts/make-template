#!/usr/bin/env python3
# Copyright Â© 2020 Fern Zapata
# This Source Code Form is subject to the terms of the ISC License.
# If a copy of the license was not distributed with this file, you
# can obtain one at https://opensource.org/licenses/ISC/.

import pwd
import os
import sys
import functools
import configparser as cp
from typing import Optional
from enum import IntEnum, auto
from pathlib import Path
from datetime import date as Date
from argparse import ArgumentParser
import jinja2 as J2
try:
  import git  # type: ignore
except ImportError:
  pass


printerr = functools.partial(print, file=sys.stderr)


class ExitCode(IntEnum):
  SUCCESS = 0
  TEMPLATE_NOT_FOUND = auto()
  TEMPLATE_ERROR = auto()
  WRITE_ERROR = auto()


class Author:
  _name: str
  _email: Optional[str]

  def __init__(self, name=None, email=None) -> None:
    if None in (name, email):
      try:
        git_config = git.GitConfigParser()
      except NameError:
        pass
      pw = pwd.getpwuid(os.getuid())

    if name is not None:
      self._name = name
    else:
      try:
        self._name = git_config.get_value('user', 'name')
      except (NameError, cp.NoOptionError):
        self._name = pw.pw_gecos.split(',')[0] or pw.pw_name

    if email is not None:
      self._email = email
    else:
      try:
        self._email = git_config.get_value('user', 'email')
      except (NameError, cp.NoOptionError):
        try:
          self._email = pw.pw_gecos.split(',')[3]
        except IndexError:
          self._email = None

  @property
  def name(self) -> str:
    return self._name

  @property
  def email(self) -> Optional[str]:
    return self._email

  def __str__(self) -> str:
    out = self.name
    if self.email is not None:
      out += f' <{self.email}>'
    return out


class Application:
  template: Path
  out: Optional[Path]
  name: str
  email: Optional[str]
  title: Optional[str]
  date: Date

  def __init__(self) -> None:
    p = ArgumentParser(
      description='Fill author and date information in a template'
    )

    p.add_argument('template',
      help='input template',
      type=Path,
    )
    p.add_argument('-o', '--out',
      help='render template into file',
      type=Path,
    )
    p.add_argument('-n', '--name',
      help='author name (current user\'s name by default)',
    )
    p.add_argument('-e', '--email',
      help="author's email (current user's by default, if available)"
    )
    p.add_argument('-t', '--title',
      help='document title (output or template filename by default)'
    )
    p.add_argument('-d', '--date',
      help='ISO format date (today by default)',
      default=Date.today(),
      type=Date.fromisoformat,
    )

    p.parse_args(namespace=self)

    if self.title is None:
      if self.out is not None:
        self.title = self.out.stem
      else:
        self.title = self.template.stem

  def render_template(self) -> str:
    env = J2.Environment(
      loader=J2.FileSystemLoader(searchpath='/'),
    )
    tmp = env.get_template(str(self.template.absolute()))
    return tmp.render(
      author=Author(self.name, self.email),
      title=self.title,
      date=self.date,
    )

  def run(self) -> int:
    try:
      rendered = self.render_template()
    except J2.exceptions.TemplateNotFound as err:
      printerr('Template not found:', err)
      return ExitCode.TEMPLATE_NOT_FOUND
    except J2.exceptions.TemplateError as err:
      printerr('Template error:', err)
      return ExitCode.TEMPLATE_ERROR

    try:
      if self.out is not None:
        self.out.write_text(rendered)
      else:
        print(rendered)
    except OSError as err:
      printerr('Could not write rendered template:', err)
      return ExitCode.WRITE_ERROR

    return ExitCode.SUCCESS


if __name__ == '__main__':
  sys.exit(Application().run())
