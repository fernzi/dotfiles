#!/usr/bin/env python3
# Copyright Â© 2020 Fern Zapata
# This Source Code Form is subject to the terms of the ISC License.
# If a copy of the license was not distributed with this file, you
# can obtain one at https://opensource.org/licenses/ISC/.

import pwd
import os
import sys
import functools
from enum import IntEnum, auto
from pathlib import Path
from datetime import date as Date
from argparse import ArgumentParser
import jinja2 as J2


printerr = functools.partial(print, file=sys.stderr)


class ExitCode(IntEnum):
  SUCCESS = 0
  TEMPLATE_NOT_FOUND = auto()
  TEMPLATE_ERROR = auto()
  WRITE_ERROR = auto()


class Application:
  template: Path
  out: Path
  name: str
  date: Date

  def __init__(self) -> None:
    p = ArgumentParser(
      description='Fill author and date information in a template'
    )

    p.add_argument('template',
      help='input template',
      type=Path,
    )
    p.add_argument('-o', '--out',
      help='render template into file',
      type=Path,
    )
    p.add_argument('-n', '--name',
      help='author name (current user\'s name by default)',
      default=self.default_name(),
    )
    p.add_argument('-d', '--date',
      help='ISO format date (today by default)',
      default=Date.today(),
      type=Date.fromisoformat,
    )

    p.parse_args(namespace=self)

  def default_name(self) -> str:
    data = pwd.getpwuid(os.getuid())
    return data.pw_gecos.split(',')[0] or data.pw_name

  def render_template(self) -> str:
    env = J2.Environment(
      loader=J2.FileSystemLoader(searchpath='/'),
    )
    tmp = env.get_template(str(self.template.absolute()))
    return tmp.render(author=self.name, date=self.date)

  def run(self) -> int:
    try:
      rendered = self.render_template()
    except J2.exceptions.TemplateNotFound as err:
      printerr('Template not found:', err)
      return ExitCode.TEMPLATE_NOT_FOUND
    except J2.exceptions.TemplateError as err:
      printerr('Template error:', err)
      return ExitCode.TEMPLATE_ERROR

    try:
      if self.out is not None:
        self.out.write_text(rendered)
      else:
        print(rendered)
    except OSError as err:
      printerr('Could not write rendered template:', err)
      return ExitCode.WRITE_ERROR

    return ExitCode.SUCCESS


if __name__ == '__main__':
  sys.exit(Application().run())
