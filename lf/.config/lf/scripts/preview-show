#!/usr/bin/env perl
# Copyright Â© 2022-2025 Fern Zapata
# This file is under the terms of the GNU GPL ver. 3, or (at your
# option) any later version. If a copy of the GPL wasn't included
# along with this file, see <https://www.gnu.org/licenses/>.

use utf8;
use v5.36;
use experimental qw(for_list);
use open qw(:std :encoding(utf-8));

use Archive::Zip;
use File::MimeInfo qw(mimetype_isa);
use File::MimeInfo::Magic;
use File::Which;
use File::stat;
use IPC::System::Simple qw(runx);
use Image::ExifTool qw(ImageInfo);
use List::Util qw(any max);

## Utilities ##########################################################

my $THUMB_SIZE = 1024;
my $CACHE_DIR = $ENV{LF_CACHE_DIR} || "$ENV{HOME}/.cache/lf";

sub name_for($file, $ext = 'jpg')
{
	my $st = stat($file);
	sprintf '%s/%d%d%d%d.%s',
		$CACHE_DIR, $st->ino, $st->size, $st->mtime, $st->ctime, $ext;
}

sub print_exif($info, @fields)
{
	my @odd = do { my $f = 1; grep { $f ^= 1 } @fields };
	my $pad = max(map(length, @odd));
	foreach my ($k, $v) (@fields) {
		if (exists $info->{$k}) {
			printf("%-*s : %s\n", $pad, $v, $info->{$k});
		}
	}
}

sub print_file($file)
{
	open my $fh, '<', $file;
	print <$fh>;
	close $fh;
}

## Thumbnail Generators ###############################################

sub thumb_bln($file)
{
	my $thumb = name_for $file, 'png';

	if (! -r $thumb && which 'blender-4.2-thumbnailer') {
		runx 'blender-4.2-thumbnailer', $file, $thumb;
	}

	$thumb if -r $thumb;
}

sub thumb_kra($file)
{
	my $thumb = name_for $file, 'png';

	if (! -r $thumb) {
		my $zip = Archive::Zip->new($file);
		$zip->extractMember('mergedimage.png', $thumb);
	}

	$thumb if -r $thumb;
}

sub thumb_pdf($file)
{
	my $thumb = name_for $file;

	if (! -r $thumb) {
		if (which 'vips') {
			runx qw(vips thumbnail --size down),
				$file, "${thumb}[optimize_coding,strip]", $THUMB_SIZE;
		} elsif (which 'magick') {
			runx 'magick', "${file}[0]",
				'-thumbnail', "${THUMB_SIZE}^>", $thumb;
		}
	}

	$thumb if -r $thumb;
}

sub thumb_vid($file)
{
	my $thumb = name_for $file;

	if (! -r $thumb && which 'ffmpeg') {
		my $filter = <<~EOF;
			thumbnail,
			scale='min($THUMB_SIZE,iw)':'min($THUMB_SIZE,ih)':
			force_original_aspect_ratio=decrease
			EOF
		runx qw(ffmpeg -v quiet -y -i), $file,
			'-frames:v', '1',
			'-vf', $filter,
			'--', $thumb;
	}

	$thumb if -r $thumb;
}

## Previewers #########################################################

sub prev_txt($file, $w, $h, $x, $y)
{
	if (which 'bat') {
		return runx qw(
			bat
			--color always
			--style plain
			--paging never
			--tabs 2
			--theme base16),
				'--terminal-width', $w - 2,
				'--line-range', ":$h",
				'--', $file;
	} elsif (which 'highlight') {
		return runx qw(
			highlight
			--force
			--out-format truecolor
			--replace-tabs 2
			--style base16/monokai
			--), $file;
	}

	# Print the file un-highlighted:
	print_file($file);
	return 0;
}

sub prev_img($file, $w, $h, $x, $y)
{
	if (which 'chafa') {
		return runx qw(
			chafa
			--colors 240
			--symbols ascii+vhalf+block+space
			--font-ratio 1/2
			--size), "${w}x${h}",
				'--', $file;
	} elsif (which 'img2txt') {
		return runx
			qw(img2txt -x 1 -y 2 -f utf8 -W), $w, '--', $file;
	}

	print_exif ImageInfo($file),
		'FileType'  => 'Format',
		'ColorType' => 'Type',
		'ImageSize' => 'Size';

	return 1;
}

sub prev_vid
{
	my $file = shift;

	if (my $thumb = thumb_vid $file) {
		return prev_img $thumb, @_;
	}

	print_exif ImageInfo($file),
		'FileType'  => 'Format',
		'Duration'  => 'Duration',
		'ImageSize' => 'Size';

	return 1;
}

sub prev_pdf
{
	my $file = shift;

	if (my $thumb = thumb_pdf $file) {
		return prev_img $thumb, @_;
	}

	print_exif ImageInfo($file),
		'Format'     => 'Format',
		'Title'      => 'Title',
		'Author'     => 'Author',
		'CreateDate' => 'Date';

	return 1;
}

sub prev_kra
{
	if (my $thumb = thumb_kra $_[0]) {
		return prev_img $thumb, @_[1..$#_];
	}
}

sub prev_bln
{
	if (my $thumb = thumb_bln $_[0]) {
		return prev_img $thumb, @_[1..$#_];
	}
}

sub prev_sql($file, $w, $h, $x, $y)
{
	if (which 'sqlite3') {
		return runx qw(sqlite --readonly --), $file,
			q(SELECT name, sql FROM sqlite_master WHERE type='table');
	}

	return 1;
}

sub prev_tor($file, $w, $h, $x, $y)
{
	if (which 'transmission-show') {
		return runx qw(transmission-show --), $file
	}

	return 1;
}

sub prev_rff($file, $w, $h, $x, $y)
{
	if (which 'grog') {
		$w -= 2;
		return runx qw(grog -Tutf8 -man -k --run),
				"-rLL=${w}n", "-rLT=${w}n", $file;
	} else {
		return prev_txt $file, $w, $h, $x, $y;
	}
}

## File Type Handlers #################################################

my @NAME_HANDLERS = (
);

my @MIME_HANDLERS = (
	qr(^image/svg|application/.*pdf$) => \&prev_pdf,
	qr(application/.*blender) => \&prev_bln,
	qr(krita$) => \&prev_kra,
	qr(roff(-man)?$) => \&prev_rff,
	qr(torrent$) => \&prev_tor,
	qr(sqlite3?$) => \&prev_sql,

	qr(^application/json.*) => \&prev_txt,

	qr(^image/) => \&prev_img,
	qr(^text/) => \&prev_txt,
	qr(^audio/) => \&prev_aud,
	qr(^video/) => \&prev_vid,
);

sub main($file, $w, $h, $x = 0, $y = 0)
{
	$file = readlink $file if -l $file;

	# Match file name:
	foreach my ($k, $v) (@NAME_HANDLERS) {
		if ($file =~ /$k/s) {
			return eval { $v->($file, $w, $h, $x, $y) } // 1;
		}
	}

	# Match mime type:
	my $mime = mimetype($file);
	foreach my ($k, $v) (@MIME_HANDLERS) {
		if (any { /$k/s } $mime, mimetype_isa $mime) {
			return eval { $v->($file, $w, $h, $x, $y) } // 1;
		}
	}

	# No matches, just show type:
	say '(', $mime ,')';
	return 1;
}

exit(main(@ARGV)) unless caller;
