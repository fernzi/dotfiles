#!/usr/bin/env perl
# Copyright Â© 2022-2025 Fern Zapata
# This file is under the terms of the GNU GPL version 3, or (at your
# option) any later version. If you didn't receive a copy of the GPL
# along with this file, see <https://www.gnu.org/licenses/>.

use v5.40;

use File::Find;
use File::Which;
use IO::Socket::UNIX;
use IPC::Open2;

my @FINDER_CMD = qw(
  fd
  --no-ignore-vcs
  --exclude .git
  --exclude node_modules
  --exclude *.py[co]
  --exclude __pycache__
  --color always
);

sub finder($pipe, %opts)
{
  my $path = $opts{path} // '.';

  if (which $FINDER_CMD[0]) {
    # Prefer using `fd`, which has colour output,
    # and it's probably the fastest option.
    my @cmd = @FINDER_CMD;
    push(@cmd, '--hidden') if $opts{hidden};
    return open2('>&' . fileno($pipe), undef, @cmd, '--', $path);
  }

  # Otherwise we use Perl's own `File::Find` cause
  # it sucks a little less than the `find` command.
  my sub wanted
  {
    if ($_ eq $path) {
      return;
    }
    if (!$opts{hidden} && /^\./s) {
      return $File::Find::prune = 1;
    }
    if (/(^(.git|node_modules|__pycache__)|\.py[co])\z/s) {
      return $File::Find::prune = 1;
    }
    $pipe->say(substr($File::Find::name, 2), '/' x (-d $_));
  }

  find(\&wanted, $path);
}

my @PICKER_CMD = qw(fzf --no-multi --layout reverse --ansi);
my $PICKER_PS1 = "\x{F0349}  ";

sub picker
{
  open2($_[0], $_[1], @PICKER_CMD, '--prompt', $PICKER_PS1);
}

sub lfr($id, @cmd)
{
  my $rdir = $ENV{XDG_RUNTIME_DIR} || '/tmp';
  my $user = $ENV{LOGNAME} || $ENV{USER} || getpwuid($<);
  my $sock = IO::Socket::UNIX->new(
    Type => SOCK_STREAM,
    Peer => "${rdir}/lf.${user}.sock",
  );
  $sock->print("send $id");
  $sock->print(" $_") for (@cmd);
  $sock->print("\n");
}

sub main
{
  my $pid = picker(my $opipe, my $ipipe);
  my $fid = finder($ipipe, hidden => $ENV{lf_hidden} eq 'true');
  close($ipipe);
  my $sel = do { local $/; <$opipe> } =~ s/\R\z//r;
  close($opipe);

  waitpid($pid, 0);
  waitpid($fid, 0);

  my $lid = $ENV{id};
  my $cmd = (-d $sel) ? 'cd' : (-f $sel) ? 'select' : undef;

  unless ($cmd) {
    lfr($lid, "echo 'jump: search cancelled'");
    return 1;
  }

  lfr($lid, $cmd, quotemeta($sel));
}

exit(main @ARGV) unless caller;
