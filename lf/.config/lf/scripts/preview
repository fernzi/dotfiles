#!/usr/bin/env perl
# Copyright Â© 2021 Fern Zapata
# This Source Code Form is subject to the terms of the ISC License.
# If a copy of the license was not distributed with this file, you
# can obtain one at https://opensource.org/licenses/ISC/.

use v5.10.1;
use warnings;
no warnings 'experimental';
use strict;

use Digest::MD5 qw(md5_hex);
use File::MimeInfo qw(mimetype_isa);
use File::MimeInfo::Magic;
use File::Path qw(make_path);
use File::Which;
use Image::ExifTool qw(ImageInfo);
use List::Util qw(max);
use Path::Tiny;


my $CACHE = ($ENV{'XDG_CACHE_HOME'} || "$ENV{'HOME'}/.cache") . '/lf';


sub print_exif {
  my ($info, $fields) = @_;
  my $pad = max(map(length, values %$fields));
  foreach (sort keys %$fields) {
    if (exists $$info{$_}) {
      printf("%-*s : %s\n", $pad, $$fields{$_}, $$info{$_});
    }
  }
}


sub preview_txt {
  my ($name, $width, $lines) = @_;
  if (which('highlight')) {
    system(
      'highlight',
      '--force',
      '--out-format=xterm256',
      '--replace-tabs=2',
      '--style=base16/ia-dark',
      '--',
      $name,
    );
  } elsif (which('pygmentize')) {
    exec('pygmentize', '--', $name);
  } else {
    print(path($name)->slurp);
  }
}


sub preview_img {
  my ($name, $width, $height) = @_;
  if (which('chafa')) {
    exec(
      'chafa',
      '--colors', '240',
      '--size', "${width}x${height}",
      '--symbols', 'ascii+vhalf+block+space',
      '--font-ratio', '5/12',
      '--',
      $name,
    );
  } else {
    my $info = ImageInfo($name);
    print_exif($info, {
      'FileType'  => 'Format : ',
      'ColorType' => 'Type   : ',
      'ImageSize' => 'Size   : ',
    });
  }
}


sub preview_vid {
  my ($name) = @_;
  my @info = (stat($name))[1, 2, 7, 9, 10];
  my $hash = md5_hex(@info);
  my $thumb = "$CACHE/$hash.jpg";
  if (-r $thumb) {
    preview_img($thumb, @_[1..$#_]);
  } elsif (which('ffmpeg')) {
    make_path($CACHE);
    if (-d $CACHE) {
      system(
        'ffmpeg',
        '-v', 'error',
        '-i', $name,
        '-frames:v', '1',
        '-vf', 'scale=128:-2',
        '--',
        $thumb,
      );
      if (-r $thumb) {
        preview_img($thumb, @_[1..$#_]);
      }
    }
  } else {
    my $info = ImageInfo($name);
    print_exif($info, {
      'FileType'  => 'Format   : ',
      'Duration'  => 'Duration : ',
      'ImageSize' => 'Size     : ',
    });
  }
}


sub preview_snd {
  my $info = ImageInfo($_[0]);
  print_exif($info, {
    'Title'  => 'Title',
    'Artist' => 'Artist',
    'Album'  => 'Album',
    'Date'   => 'Date',
  });
}


sub preview_pdf {
  my ($name) = @_;
  my $info = ImageInfo($name);
  print_exif($info, {
    'Title'      => 'Title',
    'Author'     => 'Author',
    'CreateDate' => 'Date',
  });
  if (which 'pdftotext') {
    say('');
    exec('pdftotext',
      '-l', '8',
      '-nopgbrk',
      '-q',
      '--',
      $name,
      '-'
    );
  }
}


sub preview_arc {
  my ($name) = @_;
  if (which('atool')) {
    exec('atool', '--list', '--', $name);
  } elsif (which('lsar')) {
    exec('lsar', '--', $name);
  } else {
    say('(archive)');
  }
}


sub preview_any {
  my ($name) = @_;
  if (-l $name) {
    $name = readlink($name);
  }
  my $mime = mimetype($name);
  given ($mime) {
    when (mimetype_isa $_, 'text/plain') {
      preview_txt(@_);
    }
    when (/^image/) {
      preview_img(@_);
    }
    when (/^audio/) {
      preview_snd(@_);
    }
    when (/^video/) {
      preview_vid(@_);
    }
    when (m{application/.*pdf}) {
      preview_pdf(@_);
    }
    when (/(x-(archive|cpio|(g|compressed-)?tar|bzip2|lz.*|xz|7z.*|rar)|g?zip|zstd)$/) {
      # FIXME: Is there a less disgusting way to match these?
      preview_arc(@_);
    }
    default {
      say('(binary)');
    }
  }
}


preview_any(@ARGV);
