#!/usr/bin/env python3
# Copyright Â© 2020-2021 Fern Zapata
# This Source Code Form is subject to the terms of the ISC License.
# If a copy of the license was not distributed with this file, you
# can obtain one at https://opensource.org/licenses/ISC/.

try:
  from PySide2 import QtCore as QtC, QtGui as QtG, QtWidgets as QtW
  from PySide2.QtCore import Qt
except ImportError:
  from PyQt5 import QtCore as QtC, QtGui as QtG, QtWidgets as QtW
  from PyQt5.QtCore import Qt
  QtC.Signal = QtC.pyqtSignal
  QtC.Slot = QtC.pyqtSlot


class DragArea(QtW.QListWidget):
  def __init__(self, files, parent=None):
    super().__init__(parent)
    self.setSelectionMode(self.ExtendedSelection)
    self.setDragDropMode(self.DragOnly)
    self.setIconSize(QtC.QSize(32, 32))
    self.setFrameShape(self.NoFrame)
    self.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
    self.setSizeAdjustPolicy(self.AdjustToContents)
    self.itemDoubleClicked.connect(self.onItemDoubleClicked)
    self.addFiles(files)

  def sizeHint(self):
    screenh = self.screen().size().height()
    return QtC.QSize(
      self.sizeHintForColumn(0),
      min(self.sizeHintForRow(0) * self.count(), screenh // 3),
    )

  def startDrag(self, actions):
    items = self.selectedItems()
    mime = QtC.QMimeData()
    mime.setUrls([i.data(Qt.UserRole) for i in items])
    drag = QtG.QDrag(self)
    drag.setMimeData(mime)
    drag.exec_(Qt.CopyAction | Qt.LinkAction)

  def addFiles(self, files):
    db = QtC.QMimeDatabase()
    for f in files:
      url = QtC.QUrl.fromLocalFile(f.canonicalFilePath())
      mime = db.mimeTypeForFile(f)
      icon = QtG.QIcon.fromTheme(mime.iconName())
      item = QtW.QListWidgetItem(icon, f.filePath(), self)
      item.setData(Qt.UserRole, url)

  def onItemDoubleClicked(self, item):
    QtG.QDesktopServices.openUrl(item.data(Qt.UserRole))


class DropArea(QtW.QWidget):
  filesReceived = QtC.Signal(list)

  def __init__(self, parent=None):
    super().__init__(parent)
    self.setAcceptDrops(True)
    layout = QtW.QVBoxLayout(self)
    layout.setContentsMargins(*[32] * 4)
    layout.setAlignment(Qt.AlignCenter)
    icon = QtG.QIcon.fromTheme('folder-open-symbolic')
    label = QtW.QLabel()
    label.setPixmap(icon.pixmap(48, 48))
    layout.addWidget(label, Qt.AlignCenter)

  def dragEnterEvent(self, e):
    if e.mimeData().hasUrls():
      e.accept()
    else:
      e.ignore()

  def dropEvent(self, e):
    self.filesReceived.emit(e.mimeData().urls())


class DragDropWindow(QtW.QDialog):
  def __init__(self, files, multiple, uris, parent=None):
    super().__init__(parent)
    self._multiple = multiple
    self._uris = uris
    self.setWindowTitle('Drag & Drop')
    layout = QtW.QVBoxLayout(self)
    layout.setContentsMargins(*[0] * 4)
    if files:
      area = DragArea(files)
    else:
      area = DropArea()
      area.filesReceived.connect(self.onFilesReceived)
    layout.addWidget(area)

  def onFilesReceived(self, files):
    if self._uris:
      paths = map(QtC.QUrl.url, files)
    else:
      paths = map(QtC.QUrl.path, files)
    print(*paths, sep='\n')
    if not self._multiple:
      self.close()


class DragDropApp(QtW.QApplication):
  def __init__(self, argv):
    self.setAttribute(Qt.AA_EnableHighDpiScaling)
    self.setAttribute(Qt.AA_UseHighDpiPixmaps)
    super().__init__(argv)
    self.opt = QtC.QCommandLineParser()
    self.opt.setApplicationDescription('Drag and drop in the terminal')
    self.opt.addHelpOption()
    self.opt.addPositionalArgument('files',
      'Files to display',
      '[files...]'
    )
    self.opt.addOption(QtC.QCommandLineOption(['m', 'multiple'],
        "Don't exit after a single drop",
    ))
    self.opt.addOption(QtC.QCommandLineOption(['u', 'uris'],
        'Print URIs instead of plain paths',
    ))
    self.opt.addOption(QtC.QCommandLineOption(['t', 'title'],
        'Set the dialog title',
        'TITLE',
    ))
    self.opt.process(self)

  def exec_(self):
    args = self.opt.positionalArguments()
    files = [f for f in map(QtC.QFileInfo, args) if f.exists()]
    win = DragDropWindow(
      files,
      self.opt.isSet('multiple'),
      self.opt.isSet('uris')
    )
    if self.opt.isSet('title'):
      win.setWindowTitle(self.opt.value('title'))
    win.show()
    return super().exec_()


if __name__ == '__main__':
  import sys
  sys.exit(DragDropApp(sys.argv).exec_())
